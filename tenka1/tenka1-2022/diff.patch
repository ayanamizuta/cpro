diff --git a/main_orginal.py b/main.py
index c419c0f..a257091 100644
--- a/main_orginal.py
+++ b/main.py
@@ -5,7 +5,9 @@ import json
 import time
 import urllib.request
 import urllib.error
+from log import logger
 from copy import deepcopy
+from multiprocessing import Pool
 
 # ゲームサーバのアドレス / トークン
 GAME_SERVER = os.getenv('GAME_SERVER', 'https://2022contest.gbc.tenka1.klab.jp')
@@ -21,30 +23,31 @@ def call_api(x: str) -> dict:
     url = f'{GAME_SERVER}{x}'
     # 5xxエラーの際は100ms空けて5回までリトライする
     for i in range(5):
-        print(url, flush=True)
+        logger.info(url)
         try:
             with urllib.request.urlopen(url) as res:
                 return json.loads(res.read())
         except urllib.error.HTTPError as err:
             if 500 <= err.code and err.code < 600:
-                print(err.code)
+                logger.info(err.code)
                 time.sleep(0.1)
                 continue
             else:
                 raise
         except ConnectionResetError as err:
-            print(err)
+            logger.info(err)
             time.sleep(0.1)
             continue
     raise Exception('Api Error')
 
 
-# game_idを取得する
-# 環境変数で指定されていない場合は練習試合のgame_idを返す
-def get_game_id() -> int:
-    # 環境変数にGAME_IDが設定されている場合これを優先する
-    if os.getenv('GAME_ID'):
-        return int(os.getenv('GAME_ID'))
+def get_game_ids() -> int:
+    while True:
+        join = call_api(f'/api/join/{TOKEN}')
+        if join['status'] == 'ok' and join['game_ids']:
+            logger.info(f"join game id: {join['game_ids']}")
+            return join['game_ids']
+        time.sleep(1)
 
     # start APIを呼び出し練習試合のgame_idを取得する
     mode = 0
@@ -52,7 +55,7 @@ def get_game_id() -> int:
 
     start = call_api(f'/api/start/{TOKEN}/{mode}/{delay}')
     if start['status'] == 'ok' or start['status'] == 'started':
-        return start['game_id']
+        return [start['game_id']]
 
     raise Exception(f'Start Api Error : {start}')
 
@@ -69,22 +72,35 @@ class State:
         self.agent = deepcopy(agent)
 
     # idxのエージェントがいる位置のfieldを更新する
-    def paint(self, idx: int):
+    # 値を返す。
+    # 0: 既に自陣
+    # 1: 自陣以外が半塗りになる
+    # 2: 半塗りが自陣全塗りに代わる
+    # 3: 崩壊
+    # 4: 無が自陣に代わる
+    def paint(self, idx: int) -> int:
         i, j, k, _ = self.agent[idx]
         if self.field[i][j][k][0] == -1:
             # 誰にも塗られていない場合はidxのエージェントで塗る
             self.field[i][j][k][0] = idx
             self.field[i][j][k][1] = 2
+            return 4
         elif self.field[i][j][k][0] == idx:
             # idxのエージェントで塗られている場合は完全に塗られた状態に上書きする
+            ret = 2
+            if self.field[i][j][k][1] == 2:
+                ret = 0
             self.field[i][j][k][1] = 2
+            return ret
         elif self.field[i][j][k][1] == 1:
             # idx以外のエージェントで半分塗られた状態の場合は誰にも塗られていない状態にする
             self.field[i][j][k][0] = -1
             self.field[i][j][k][1] = 0
+            return 3
         else:
             # idx以外のエージェントで完全に塗られた状態の場合は半分塗られた状態にする
             self.field[i][j][k][1] -= 1
+            return 1
 
     # エージェントidxをd方向に回転させる
     # 方向については問題概要に記載しています
@@ -123,7 +139,7 @@ class State:
             self.agent[idx][2] = kk
 
     # エージェントが同じマスにいるかを判定する
-    def is_same_pos(self, a: [int], b: [int]) -> bool:
+    def is_same_pos(self, a: list[int], b: list[int]) -> bool:
         return a[0] == b[0] and a[1] == b[1] and a[2] == b[2]
 
     # idxのエージェントがいるマスが自分のエージェントで塗られているかを判定する
@@ -135,7 +151,7 @@ class State:
 
     # 全エージェントの移動方向の配列を受け取り移動させてフィールドを更新する
     # -1の場合は移動させません(0~3は移動APIのドキュメント記載と同じです)
-    def move(self, move: [int]):
+    def move(self, move: list[int]):
         # エージェントの移動処理
         for idx in range(6):
             if move[idx] == -1:
@@ -144,6 +160,7 @@ class State:
             self.move_forward(idx)
 
         # フィールドの更新処理
+        ret = None
         for idx in range(6):
             if move[idx] == -1:
                 continue
@@ -156,47 +173,95 @@ class State:
                 break
 
             if not ok:
+                if idx==0:
+                    ret = 0
                 continue
-            self.paint(idx)
-
-
-class Bot:
-    def solve(self):
-        game_id = get_game_id()
-        next_d = random.randint(0, 3)
-        while True:
-            # 移動APIを呼ぶ
-            move = call_move(game_id, next_d)
-            print('status = {}'.format(move['status']), file=sys.stderr, flush=True)
-            if move['status'] == "already_moved":
-                continue
-            elif move['status'] != 'ok':
-                break
-            print('turn = {}'.format(move['turn']), file=sys.stderr, flush=True)
-            print('score = {} {} {} {} {} {}'.format(move['score'][0], move['score'][1], move['score'][2], move['score'][3], move['score'][4], move['score'][5]), file=sys.stderr, flush=True)
-            # 4方向で移動した場合を全部シミュレーションする
-            best_c = -1
-            best_d = []
-            for d in range(4):
-                m = State(move['field'], move['agent'])
-                m.move([d, -1, -1, -1, -1, -1])
-                # 自身のエージェントで塗られているマス数をカウントする
-                c = 0
-                for i in range(6):
-                    for j in range(N):
-                        for k in range(N):
-                            if m.field[i][j][k][0] == 0:
-                                c += 1
-                # 最も多くのマスを自身のエージェントで塗れる移動方向のリストを保持する
-                if c > best_c:
-                    best_c = c
-                    best_d = [d]
-                elif c == best_c:
-                    best_d.append(d)
-            # 最も多くのマスを自身のエージェントで塗れる移動方向のリストからランダムで方向を決める
-            next_d = random.choice(best_d)
+            ret_ = self.paint(idx)
+            if idx==0:
+                ret=ret_
+        return ret
+
+    def is_another_near(self) -> bool:
+        for j in range(1,6):
+            if self.is_same_pos(self.agent[0], self.agent[j]):
+                return True
+        return False
+
+def solve_game(game_id):
+    next_d = random.randint(0, 3)
+    two_continue = 0
+    while True:
+        # 移動APIを呼ぶ
+        move = call_move(game_id, next_d)
+        logger.info('status = {}'.format(move['status']))
+        if move['status'] == "already_moved":
+            continue
+        elif move['status'] != 'ok':
+            break
+        logger.info('turn = {}'.format(move['turn']))
+        logger.info('score = {} {} {} {} {} {}'.format(move['score'][0], move['score'][1], move['score'][2], move['score'][3], move['score'][4], move['score'][5]))
+        # 4方向で移動した場合を全部シミュレーションする
+        best_c = -1
+        best_d = []
+        flip_ok = False
+        another_near = [False]*4
+        for d in range(4):
+            m = State(move['field'], move['agent'])
+            local_score = m.move([d, -1, -1, -1, -1, -1])
+            if m.is_another_near():
+                another_near[d]=True
+            for d_ in range(4):
+                if another_near[d]:
+                    break
+                m_ = State(m.field,m.agent)
+                m_.move([d_, -1, -1, -1, -1, -1])
+                if m_.is_another_near():
+                    another_near[d]=True
+            # 自身のエージェントで塗られているマス数をカウントする
+            # 直前のマスが自陣でない場合、そのマスに戻る
+
+            c = local_score
+            """for i in range(6):
+                for j in range(N):
+                    for k in range(N):
+                        if m.field[i][j][k][0] == 0:
+                            c += 1"""
+            if d==2 and c>0:
+                flip_ok=True
+            # 最も多くのマスを自身のエージェントで塗れる移動方向のリストを保持する
+            if c > best_c:
+                best_c = c
+                best_d = [d]
+            elif c == best_c:
+                best_d.append(d)
+        # 最も多くのマスを自身のエージェントで塗れる移動方向のリストからランダムで方向を決める
+        another_vacances = [i for i in range(4) if not another_near[i]]
+        if set(best_d).intersection(set(another_vacances)):
+            next_d = random.choice(list(set(best_d).intersection(set(another_vacances))))
+        else:
+            if another_vacances:
+                next_d = random.choice(another_vacances)
+            else:
+                next_d = random.choice([0,1,2,3])
+
+        if flip_ok and not another_near[2]:
+            next_d=2
+        if next_d==2:
+            two_continue+=1
+        else:
+            two_continue=0
+        if two_continue>5:
+            next_d = random.choice([0,1,3])
+            two_continue=0
 
 
 if __name__ == "__main__":
-    bot = Bot()
-    bot.solve()
\ No newline at end of file
+    while True:
+        game_ids = get_game_ids()
+        with Pool(len(game_ids)) as p:
+            logger.info(f"games {game_ids} start")
+            print("games start")
+            p.map(solve_game, game_ids)
+            print("games finish")
+            logger.info(f"games {game_ids} finish")
+    
\ No newline at end of file
